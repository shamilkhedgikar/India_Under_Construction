setwd("C:/Users/shami/Desktop/ISB research/CAPEXDX/R data/ISB_1")
e = local({load(".Rdata"); environment()})
tools:::makeLazyLoadDB(e, "New")
load("C:/Users/shami/Desktop/ISB research/CAPEXDX/R data/ISB_1/.RData")
remove(try5)
remove(plot_list)
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex()
hexabin
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = Industry)) + geom_hex()
hexabin
hexabin <- ggplotly(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex()
require(plotly)
hexabin <- ggplotly(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex()
hexabin <- plot_ly(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex()
hexabin
remove(hexabin)
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex()
hexabin
splndf_new@data$Cost..Rs..Million. <- as.numeric(splndf_new@data$Cost..Rs..Million.)
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex()
hexabin
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex(bins=100)
hexabin
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = Industry)) + geom_hex(bins=100)
hexabin
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = Industry)) + geom_hex(bins=10000)
hexabin
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = Industry)) + geom_hex(bins=1000)
hexabin
remove(hexabin)
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = Industry)) + geom_hex(bins=1000)
hexabin
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex(bins=1000)
hexabin
hexabin <- ggplotly(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex(bins=1000)
hexabin_interactive <- ggplotly(hexabin)
View(hexabin_interactive)
hexabin_interactive
hexabin <- ggplot(splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_hex(bins=1000) + scale_y_continuous(name = "Cost in Rupees Million", labels = scales::comma)
hexabin
hexabin_interactive <- ggplotly(hexabin)%>%add_trace(text = c('x','y')
)
require(htmltools)
hexabin_interactive
hexabin_interactive <- ggplotly(hexabin)%>%add_trace(type = "scatter", mode = 'markers' text = c('x','y')
hexabin_interactive <- ggplotly(hexabin)%>%add_trace(type = "scatter", mode = 'markers', text = c('x','y')
)
hexabin_interactive
remove(hexabin)
remove(hexabin_interactive)
line_vs_cost <- ggplot(data = splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = Industry)) + geom_point()
line_vs_cost
line_vs_cost <- ggplot(data = splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_point() + facet_wrap(~Industry)
line_vs_cost
line_vs_cost <- ggplot(data = splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_point() + facet_wrap(~Industry) + scale_y_continuous(name = "Cost in Rupees Million", labels = scales::commas)
line_vs_cost <- ggplot(data = splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million.)) + geom_point() + facet_wrap(~Industry) + scale_y_continuous(name = "Cost in Rupees Million", labels = scales::comma)
line_vs_cost
line_vs_cost_interactive <- plotly(line_vs_cost)
line_vs_cost_interactive <- plot_ly(line_vs_cost)
line_vs_cost_interactive <- ggplotly(line_vs_cost)
line_vs_cost_interactive
View(splndf_new)
line_vs_cost <- ggplot(data = splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = status_type)) + geom_point() + facet_wrap(~Industry) + scale_y_continuous(name = "Cost in Rupees Million", labels = scales::comma)
line_vs_cost
line_vs_cost <- ggplot(data = splndf_new@data, aes(Linelengths_kms, Cost..Rs..Million., color = status_type)) + geom_point() + facet_wrap(~Industry) + scale_y_continuous(name = "Cost in Rupees Million", labels = scales::comma) + theme(legend.position = "bottom")
line_vs_cost
devtools::install_github("dmurdoch/leaflet@crosstalk4")
unloadNamespace("leaflet")
devtools::install_github("dmurdoch/leaflet@crosstalk4")
devtools::install_github("dmurdoch/leaflet@crosstalk4", force = TRUE)
loadNamespace("leaflet")
require(leaflet)
sessionInfo()
linear_shared_data <- SharedData$new(splndf_new)
linear_shared_data_df <- SharedData$new(as.data.frame(splndf_new@data), group = linear_shared_data$groupName())
slider_l <- filter_slider("Completion.Date", "Choose Date Range", linear_shared_data_df, ~Completion.Date, step = 60, ticks = TRUE, animate = FALSE)
checkbox_l <- filter_checkbox("status_type","Project Status", linear_shared_data_df, ~status_type, inline = TRUE)
dropdown_l <- filter_select("Industry","Industry", linear_shared_data_df, ~factor(Industry))
datatable_l <- datatable(df, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=500, scroller=TRUE))
leaflet_l <- leaflet(data=linear_shared_data)%>%addTiles()%>%addPolylines(data=linear_shared_data)
linear_widget <- bscols(list(slider_l,checkbox_l,dropdown_l,leaflet_l,datatable_l))
save_html(linear_widget,"try2.html")
remove(try3)
remove(try6)
remove(try2)
remove(try4)
remove(try)
remove(event_data)
gc()
load("C:/Users/shami/Desktop/ISB research/CAPEXDX/R data/ISB_1/.RData")
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(lubridate)
require(maptools)
require(leaflet)
require(tidyverse)
require(mapview)
require(maptools)
require(htmlwidgets)
require(scales)
require(grid)
require(scales)
require(grid)
require(raster)
require(sf)
require(shiny)
require(DT)
require(crosstalk)
require(htmltools)
slider_l <- filter_slider("Completion.Date", "Choose Date Range", linear_shared_data_df, ~Completion.Date, step = 60, ticks = TRUE, animate = FALSE)
checkbox_l <- filter_checkbox("status_type","Project Status", linear_shared_data_df, ~status_type, inline = TRUE)
dropdown_l <- filter_select("Industry","Industry", linear_shared_data_df, ~factor(Industry))
datatable_l <- datatable(linear_shared_data_df, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=500, scroller=TRUE))
leaflet_l <- leaflet(data=linear_shared_data)%>%addTiles()%>%addPolylines(data=linear_shared_data)
linear_widget <- bscols(list(slider_l,checkbox_l,dropdown_l,leaflet_l,datatable_l))
save_html(linear_widget,"try3.html")
require(ggplot2)
require(lubridate)
require(maptools)
require(leaflet)
require(tidyverse)
require(mapview)
require(maptools)
require(htmlwidgets)
require(scales)
require(grid)
require(scales)
require(grid)
require(raster)
require(sf)
require(shiny)
require(DT)
require(crosstalk)
require(htmltools)
slider_l <- filter_slider("Completion.Date", "Choose Date Range", linear_shared_data_df, ~Completion.Date, step = 60, ticks = TRUE, animate = FALSE)
checkbox_l <- filter_checkbox("status_type","Project Status", linear_shared_data_df, ~status_type, inline = TRUE)
dropdown_l <- filter_select("Industry","Industry", linear_shared_data_df, ~factor(Industry))
datatable_l <- datatable(linear_shared_data_df, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=500, scroller=TRUE))
leaflet_l <- leaflet()%>%addTiles()%>%addPolygons(data=linear_shared_data)
linear_widget <- bscols(list(slider_l,checkbox_l,dropdown_l,leaflet_l,datatable_l))
save_html(linear_widget,"try4.html")
require(ggplot2)
require(lubridate)
require(maptools)
require(leaflet)
require(tidyverse)
require(mapview)
require(maptools)
require(htmlwidgets)
require(scales)
require(grid)
require(scales)
require(grid)
require(raster)
require(sf)
require(shiny)
require(DT)
require(crosstalk)
require(htmltools)
slider_l <- filter_slider("Completion.Date", "Choose Date Range", linear_shared_data_df, ~Completion.Date, step = 60, ticks = TRUE, animate = FALSE)
checkbox_l <- filter_checkbox("status_type","Project Status", linear_shared_data_df, ~status_type, inline = TRUE)
dropdown_l <- filter_select("Industry","Industry", linear_shared_data_df, ~factor(Industry))
datatable_l <- datatable(linear_shared_data_df, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=500, scroller=TRUE))
leaflet_l <- leaflet()%>%addTiles()%>%addPolygons(data=linear_shared_data)
linear_widget <- bscols(list(slider_l,checkbox_l,dropdown_l,leaflet_l,datatable_l))
save_html(linear_widget,"try5.html")
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>%
highlight(dynamic = T, on = "plotly_click", off ="plotly_relayout", opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
require(plotly)
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>%
highlight(dynamic = T, on = "plotly_click", off ="plotly_relayout", opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1Ijoic2hhbWlsc2siLCJhIjoiY2ptaGVkd2U4MG44ajNwbXVsNGxjc2VlYSJ9.W685zfToTD2ZPFAgq4CdeQ')
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>%
highlight(dynamic = T, on = "plotly_click", off ="plotly_relayout", opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
sample_widget2
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>% addPolylines()
highlight(dynamic = T, on = "plotly_click", off ="plotly_relayout", opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>% addPolylines() %>% opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>% addPolylines() %>% (opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
sample_widget2 <- plot_mapbox(linear_shared_data, color = "blue", showlegend = FALSE) %>% addPolylines(data = linear_shared_data) %>% (opacityDim = getOption("opacityDim", 0.2)) %>% layout(title = "NON-LINEAR PROJECTS", mapbox = list(style = "mapbox://styles/shamilsk/cjmhgipkknbht2smqtx3pzef7"))
linear_multistring <- readRDS("C:/Users/shami/Desktop/ISB research/CAPEXDX/R data/2000_cutoff/linear_multistring.RDS")
class(linear_multistring)
st_crs(linear_multistring)
linear_multistring2 <- st_sf(linear_multistring, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs ")
st_crs(linear_multistring2)
require(plotly)
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1Ijoic2hhbWlsc2siLCJhIjoiY2ptaGVkd2U4MG44ajNwbXVsNGxjc2VlYSJ9.W685zfToTD2ZPFAgq4CdeQ')
plotly_plot <- plot_geo(linear_multistring2)
require(htmltools)
knitr::opts_chunk$set(echo = TRUE)
require(plotly)
require(htmltools)
save_html(plotly_plot, "alpha1.html")
require(plotly)
require(htmltools)
plotly_plot2 <- plot_mapbox(linear_multistring2)
save_html(plotly_plot2, "alpha2.html")%>% config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=FALSE)) %>% layout(yaxis=list(fixedrange=FALSE))
require(plotly)
require(htmltools)
plotly_plot2 <- plot_mapbox(linear_multistring2)%>% config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=FALSE)) %>% layout(yaxis=list(fixedrange=FALSE))
save_html(plotly_plot2, "alpha2.html")
g <- list(showframe = FALSE,
coastlinecolor = toRGB("white"),
showland = TRUE,
landcolor = toRGB("gray80"),
showcountries = TRUE,
countrycolor = toRGB("white"),
countrywidth = 0.2,
projection = list(type = 'Mercator'))
plotly_plot3 <- plot_geo(linear_multistring2)%>%layout(geo = g)
save_html(plotly_plot3, "alpha3.html")
linear_shared_data2 <- SharedData$new(linear_multistring2)
require(plotly)
require(DT)
require(crosstalk)
slider_l2 <- filter_slider("Completion.Date", "Choose Date Range", linear_shared_data_2, ~Completion.Date, step = 60, ticks = TRUE, animate = FALSE)
require(plotly)
require(DT)
require(crosstalk)
slider_l2 <- filter_slider("Completion.Date", "Choose Date Range", linear_shared_data2, ~Completion.Date, step = 60, ticks = TRUE, animate = FALSE)
checkbox_l2 <- filter_checkbox("status_type","Project Status", linear_shared_data2, ~status_type, inline = TRUE)
dropdown_l2 <- filter_select("Industry","Industry", linear_shared_data2, ~factor(Industry))
plotly_plot4 <- plot_geo(linear_shared_data2)%>%layout(geo=g)%>%config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=FALSE)) %>% layout(yaxis=list(fixedrange=FALSE))
linear_widget2 <- bscols(list(slider_l2,checkbox_l2,dropdown_l2,plotly_plot4))
save_html(linear_widget2, "linear_widget2.html")
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample <- mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(all_single_nonempty_entries_new, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(all_single_nonempty_entries_new))
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample <- mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(all_single_nonempty_entries_new, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(all_single_nonempty_entries_new))
nonlinear_points <- all_single_nonempty_entries_new
coordinates(nonlinear_points) <- ~Latitude + Longitude
class(nonlinear_points)
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample <- mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points, xcol = zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample = mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points, xcol = zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample = mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points,zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
leaflet_sample <- leaflet(mapview_sample)
htmlwidgets::saveWidget(leaflet_sample, "wrapper.html")
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample = mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points,zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
htmlwidgets::saveWidget(mapview_sample, "wrapper2.html")
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample = mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points,zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
htmltools::save_html(mapview_sample, "wrapper2.html")
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample = mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points,zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
htmlwidgets::saveWidget(mapview_sample, "wrapper2.html", selfcontained = FALSE)
library(leaflet)
library(tidyverse)
library(dplyr)
library(maps)
library(sp)
library(htmlwidgets)
library(mapview)
library(crosstalk)
library(htmltools)
library(ggplot2)
library(DT)
mapview_sample = mapview(linear_multistring2, zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(linear_multistring2)) + mapview(nonlinear_points,zcol = c("Project.Status", "Type.of.Unit"), burst = TRUE, hide = TRUE, popup = popupTable(nonlinear_points))
mapshot(mapview_sample, "wrapper2.html", selfcontained = FALSE)
line_vs_cost
